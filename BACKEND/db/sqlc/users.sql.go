// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hash, role, organization_name, user_image)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, password_hash, role, organization_name, user_image, created_at
`

type CreateUserParams struct {
	Name             string `db:"name" json:"name"`
	Email            string `db:"email" json:"email"`
	PasswordHash     string `db:"password_hash" json:"password_hash"`
	Role             string `db:"role" json:"role"`
	OrganizationName string `db:"organization_name" json:"organization_name"`
	UserImage        string `db:"user_image" json:"user_image"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.OrganizationName,
		arg.UserImage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.OrganizationName,
		&i.UserImage,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, role, organization_name, user_image, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.OrganizationName,
		&i.UserImage,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, role, organization_name, user_image, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.OrganizationName,
		&i.UserImage,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, email = $3, role = $4, organization_name = $5, user_image = $6
WHERE id = $1
RETURNING id, name, email, role, organization_name, user_image, created_at
`

type UpdateUserParams struct {
	ID               uuid.UUID `db:"id" json:"id"`
	Name             string    `db:"name" json:"name"`
	Email            string    `db:"email" json:"email"`
	Role             string    `db:"role" json:"role"`
	OrganizationName string    `db:"organization_name" json:"organization_name"`
	UserImage        string    `db:"user_image" json:"user_image"`
}

type UpdateUserRow struct {
	ID               uuid.UUID    `db:"id" json:"id"`
	Name             string       `db:"name" json:"name"`
	Email            string       `db:"email" json:"email"`
	Role             string       `db:"role" json:"role"`
	OrganizationName string       `db:"organization_name" json:"organization_name"`
	UserImage        string       `db:"user_image" json:"user_image"`
	CreatedAt        sql.NullTime `db:"created_at" json:"created_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.OrganizationName,
		arg.UserImage,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.OrganizationName,
		&i.UserImage,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserWithoutEmail = `-- name: UpdateUserWithoutEmail :one
UPDATE users
SET name = $2, role = $3, organization_name = $4, user_image = $5
WHERE id = $1
RETURNING id, name, email, role, organization_name, user_image, created_at
`

type UpdateUserWithoutEmailParams struct {
	ID               uuid.UUID `db:"id" json:"id"`
	Name             string    `db:"name" json:"name"`
	Role             string    `db:"role" json:"role"`
	OrganizationName string    `db:"organization_name" json:"organization_name"`
	UserImage        string    `db:"user_image" json:"user_image"`
}

type UpdateUserWithoutEmailRow struct {
	ID               uuid.UUID    `db:"id" json:"id"`
	Name             string       `db:"name" json:"name"`
	Email            string       `db:"email" json:"email"`
	Role             string       `db:"role" json:"role"`
	OrganizationName string       `db:"organization_name" json:"organization_name"`
	UserImage        string       `db:"user_image" json:"user_image"`
	CreatedAt        sql.NullTime `db:"created_at" json:"created_at"`
}

func (q *Queries) UpdateUserWithoutEmail(ctx context.Context, arg UpdateUserWithoutEmailParams) (UpdateUserWithoutEmailRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserWithoutEmail,
		arg.ID,
		arg.Name,
		arg.Role,
		arg.OrganizationName,
		arg.UserImage,
	)
	var i UpdateUserWithoutEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.OrganizationName,
		&i.UserImage,
		&i.CreatedAt,
	)
	return i, err
}
