// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :exec
INSERT INTO cart (user_id, product_id, quantity)
VALUES ($1, $2, $3)
`

type AddToCartParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID uuid.NullUUID `db:"product_id" json:"product_id"`
	Quantity  int32         `db:"quantity" json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) error {
	_, err := q.db.ExecContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	return err
}

const getCartByUser = `-- name: GetCartByUser :many
SELECT id, user_id, product_id, quantity, created_at FROM cart WHERE user_id = $1
`

func (q *Queries) GetCartByUser(ctx context.Context, userID uuid.NullUUID) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getCartByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromCart = `-- name: RemoveFromCart :exec
DELETE FROM cart WHERE user_id = $1 AND product_id = $2
`

type RemoveFromCartParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID uuid.NullUUID `db:"product_id" json:"product_id"`
}

func (q *Queries) RemoveFromCart(ctx context.Context, arg RemoveFromCartParams) error {
	_, err := q.db.ExecContext(ctx, removeFromCart, arg.UserID, arg.ProductID)
	return err
}

const updateCartQuantity = `-- name: UpdateCartQuantity :exec
UPDATE cart
SET quantity = $3
WHERE user_id = $1 AND product_id = $2
`

type UpdateCartQuantityParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID uuid.NullUUID `db:"product_id" json:"product_id"`
	Quantity  int32         `db:"quantity" json:"quantity"`
}

func (q *Queries) UpdateCartQuantity(ctx context.Context, arg UpdateCartQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateCartQuantity, arg.UserID, arg.ProductID, arg.Quantity)
	return err
}
