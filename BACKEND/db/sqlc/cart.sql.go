// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO cart (user_id, product_id, quantity)
VALUES ($1, $2, $3)
RETURNING id, user_id, product_id, quantity, created_at
`

type AddToCartParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID uuid.NullUUID `db:"product_id" json:"product_id"`
	Quantity  int32         `db:"quantity" json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const clearCartByUserID = `-- name: ClearCartByUserID :exec
DELETE FROM cart WHERE user_id = $1
`

func (q *Queries) ClearCartByUserID(ctx context.Context, userID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, clearCartByUserID, userID)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart WHERE id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, id)
	return err
}

const getCartByID = `-- name: GetCartByID :one
SELECT id, user_id, product_id, quantity, created_at FROM cart WHERE id = $1
`

func (q *Queries) GetCartByID(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartByID, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getCartByUserID = `-- name: GetCartByUserID :many
SELECT id, user_id, product_id, quantity, created_at FROM cart WHERE user_id = $1
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID uuid.NullUUID) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getCartByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartItem = `-- name: GetCartItem :one
SELECT id, user_id, product_id, quantity, created_at FROM cart WHERE user_id = $1 AND product_id = $2
`

type GetCartItemParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID uuid.NullUUID `db:"product_id" json:"product_id"`
}

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCartItem, arg.UserID, arg.ProductID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const updateCartQuantity = `-- name: UpdateCartQuantity :one
UPDATE cart
SET quantity = $2
WHERE id = $1
RETURNING id, user_id, product_id, quantity, created_at
`

type UpdateCartQuantityParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Quantity int32     `db:"quantity" json:"quantity"`
}

func (q *Queries) UpdateCartQuantity(ctx context.Context, arg UpdateCartQuantityParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCartQuantity, arg.ID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}
