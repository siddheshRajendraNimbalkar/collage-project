// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const cancelOrder = `-- name: CancelOrder :exec
UPDATE orders
SET status = 'cancelled'
WHERE id = $1
`

func (q *Queries) CancelOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, cancelOrder, id)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, product_id, quantity, total_price, status)
VALUES ($1, $2, $3, $4, 'pending')
RETURNING id, user_id, product_id, quantity, total_price, status, created_at
`

type CreateOrderParams struct {
	UserID     uuid.NullUUID `db:"user_id" json:"user_id"`
	ProductID  uuid.NullUUID `db:"product_id" json:"product_id"`
	Quantity   int32         `db:"quantity" json:"quantity"`
	TotalPrice string        `db:"total_price" json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, product_id, quantity, total_price, status, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT id, user_id, product_id, quantity, total_price, status, created_at FROM orders WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID uuid.NullUUID) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     uuid.UUID      `db:"id" json:"id"`
	Status sql.NullString `db:"status" json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
