// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token, expires_at, token_block)
VALUES ($1, $2, $3, false) 
RETURNING id, user_id, token, created_at, expires_at, token_block
`

type CreateSessionParams struct {
	UserID    uuid.NullUUID `db:"user_id" json:"user_id"`
	Token     string        `db:"token" json:"token"`
	ExpiresAt time.Time     `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TokenBlock,
	)
	return i, err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions WHERE token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByToken, token)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, created_at, expires_at, token_block FROM sessions WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.TokenBlock,
	)
	return i, err
}

const updateSessionTokenBlock = `-- name: UpdateSessionTokenBlock :exec
UPDATE sessions
SET token_block = $2
WHERE token = $1
`

type UpdateSessionTokenBlockParams struct {
	Token      string       `db:"token" json:"token"`
	TokenBlock sql.NullBool `db:"token_block" json:"token_block"`
}

func (q *Queries) UpdateSessionTokenBlock(ctx context.Context, arg UpdateSessionTokenBlockParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionTokenBlock, arg.Token, arg.TokenBlock)
	return err
}
