// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, stock, product_url, category, type, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, description, price, stock, product_url, category, type, created_by, created_at
`

type CreateProductParams struct {
	Name        string        `db:"name" json:"name"`
	Description string        `db:"description" json:"description"`
	Price       string        `db:"price" json:"price"`
	Stock       int32         `db:"stock" json:"stock"`
	ProductUrl  string        `db:"product_url" json:"product_url"`
	Category    string        `db:"category" json:"category"`
	Type        string        `db:"type" json:"type"`
	CreatedBy   uuid.NullUUID `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ProductUrl,
		arg.Category,
		arg.Type,
		arg.CreatedBy,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ProductUrl,
		&i.Category,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllProductsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAllProducts(ctx context.Context, arg GetAllProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ProductUrl,
			&i.Category,
			&i.Type,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ProductUrl,
		&i.Category,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :many
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products WHERE name = $1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ProductUrl,
			&i.Category,
			&i.Type,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByUserID = `-- name: GetProductByUserID :many
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products WHERE created_by = $1
`

func (q *Queries) GetProductByUserID(ctx context.Context, createdBy uuid.NullUUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByUserID, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ProductUrl,
			&i.Category,
			&i.Type,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products WHERE category = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProductsByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ProductUrl,
			&i.Category,
			&i.Type,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByType = `-- name: ListProductsByType :many
SELECT id, name, description, price, stock, product_url, category, type, created_by, created_at FROM products WHERE type = $1 AND category = $2
ORDER BY created_at DESC
`

type ListProductsByTypeParams struct {
	Type     string `db:"type" json:"type"`
	Category string `db:"category" json:"category"`
}

func (q *Queries) ListProductsByType(ctx context.Context, arg ListProductsByTypeParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByType, arg.Type, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Stock,
			&i.ProductUrl,
			&i.Category,
			&i.Type,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    name = $2,
    description = $3,
    price = $4,
    stock = $5,
    product_url = $6,
    category = $7,
    type = $8
WHERE id = $1
RETURNING id, name, description, price, stock, product_url, category, type, created_by, created_at
`

type UpdateProductParams struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	Description string    `db:"description" json:"description"`
	Price       string    `db:"price" json:"price"`
	Stock       int32     `db:"stock" json:"stock"`
	ProductUrl  string    `db:"product_url" json:"product_url"`
	Category    string    `db:"category" json:"category"`
	Type        string    `db:"type" json:"type"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Stock,
		arg.ProductUrl,
		arg.Category,
		arg.Type,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Stock,
		&i.ProductUrl,
		&i.Category,
		&i.Type,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE products
SET stock = $2
WHERE id = $1
`

type UpdateProductStockParams struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Stock int32     `db:"stock" json:"stock"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductStock, arg.ID, arg.Stock)
	return err
}
